#리스트

#리스트 생성하기
'''
리스트명 = [값1, 값2, ...] 의 형태로 리스트 생성
리스트명 = [] 의 형태로 빈 리스트 생성 가능
.index('값1') : 몇번째 인덱스에 값1이 존재하는지 확인
.append('값3') : 리스트 끝에 값3을 추가
.insert(인덱스, '값4') : 인덱스에 값4를 추가하고 그 뒤 인덱스는 한칸씩 밈
.pop() : 리스트 마지막 인덱스 값 하나 제거
.clear() : 리스트의 모든 값 제거
.sort() : 리스트의 숫자를 오름차순으로 정렬
.sort(reverse=True) : 리스트의 숫자를 내림차순으로 정렬
.reverse() : 리스트의 값의 순서를 거꾸로 뒤집음
.sorted() : .sort()와 달리 원본 리스트를 변경하지 않고 정렬된 리스트 새로 생성
'''

#리스트 확장
'''
.extend(리스트명1) : 리스트와 리스트1을 합침(순서는 리스트1이 나중)
'''

#딕셔너리
'''
key와 value 한쌍으로 이루어져 있음
딕셔너리명 = {key1: value1, key2: value2, ...} 의 형태로 생성
딕셔너리명 = {} 의 형태로 빈 딕셔너리 생성 가능
딕셔너리명[key1] : key1에 해당하는 value 출력
.get(key1) : key1에 해당하는 value 출력
.get(key, default) : key에 해당하는 value가 없다면 default를 출력
key1 in 딕셔너리명 : key1에 value가 할당되어 있다면 True를, 할당되어 있지 않다면 False를 출력
in 연산자는 문자열에 해당 문자가 포함되었는지를 확인할 때도 사용 가능
딕셔녀리명["key3"] = value3 : key와 value를 추가
딕셔녀리명["key1"] = value3 : key의 vlaue를 변경
del 딕셔녀리명["key3"] : key에 해당된 value 제거
.keys() : 딕셔너리에 존재하는 key 출력
.values() : 딕셔너리에 존재하는 value 출력
.items() : 딕셔너리에 존재하는 key, value 출력
.clear() : 딕셔너리 모든 값 삭제
'''